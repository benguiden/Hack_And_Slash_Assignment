<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerRun0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>25</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

//State
state = "stance";

//Movement
velocity = 0;
velocityIn = 0;
velocityMax = 4;
acceleration = 0.25;
dir = 0;
dirIn = 0;
dirAccel = 0.1;
sprDir = 0;

//Rolling
rollTimeMax = 45;
rollTime = 0;
rollVel = 0;
rollVelTarget = 0;

//Attacking
attack = "LR";
attackVel = 0
attackVelTarget = 0
attackTime = 0;
attackTimeTarget = 0;
attackAngle = 0;
attackRange = 0;
attackAngleRange = pi / 2;

//Image
image_speed=0.5;
drawFoot = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Set Up
//Sprite Direction
if ((dir&gt;=2 * pi*(15/16)) or (dir&lt;2 * pi*(1/16))) sprDir = 6;
else if ((dir&gt;=2 * pi*(1/16)) &amp;&amp; (dir&lt;2 * pi*(3/16))) sprDir = 5;
else if ((dir&gt;=2 * pi*(3/16)) &amp;&amp; (dir&lt;2 * pi*(5/16))) sprDir = 4;
else if ((dir&gt;=2 * pi*(5/16)) &amp;&amp; (dir&lt;2 * pi*(7/16))) sprDir = 3;
else if ((dir&gt;=2 * pi*(7/16)) &amp;&amp; (dir&lt;2 * pi*(9/16))) sprDir = 2;
else if ((dir&gt;=2 * pi*(9/16)) &amp;&amp; (dir&lt;2 * pi*(11/16))) sprDir = 1;
else if ((dir&gt;=2 * pi*(11/16)) &amp;&amp; (dir&lt;2 * pi*(13/16))) sprDir = 0;
else if ((dir&gt;=2 * pi*(13/16)) &amp;&amp; (dir&lt;2 * pi*(15/16))) sprDir = 7;

//Stance
if (state == "stance"){
   sprite_index = asset_get_index("sprPlayerStance" + string(sprDir));   
   image_speed = 0.15;
}

//Running
else if (state == "running"){
   sprite_index = asset_get_index("sprPlayerRun" + string(sprDir));
   image_speed = 0.5 * (velocity/velocityMax);
}

//Rolling
else if (state == "roll"){
   sprite_index = asset_get_index("sprPlayerRoll" + string(sprDir));
   image_speed = 0;
   image_index = (image_number - 1) * ((rollTimeMax-rollTime)/rollTimeMax);
}

//Attacking
else{
   
   if (attack == "LR") sprite_index = asset_get_index("sprPlayerLightAttackRight" + string(sprDir));
   else if ((attack == "LL") || (attack == "LL2")) sprite_index = asset_get_index("sprPlayerLightAttackLeft" + string(sprDir));
   else if (attack == "LD") sprite_index = asset_get_index("sprPlayerLightAttackDown" + string(sprDir));
   else if (attack == "LU") sprite_index = asset_get_index("sprPlayerLightAttackUp" + string(sprDir));
   else if (attack == "HS") sprite_index = asset_get_index("sprPlayerHeavyStab" + string(sprDir));
   else if (attack == "HT") sprite_index = asset_get_index("sprPlayerHeavyTwirl" + string(sprDir));
   else if (attack == "HD") sprite_index = asset_get_index("sprPlayerHeavyDrop" + string(sprDir));
   image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sound

//Feet
if (state == "running"){
   if ((floor(image_index) == 2) or (floor(image_index) == 8)){
      if (!(audio_is_playing(snPlayerFoot01)) &amp;&amp; !(audio_is_playing(snPlayerFoot02))){
         audio_play_sound( asset_get_index("snPlayerFoot0" + string(1 + irandom(1))), 2, false);
      }
   }
   if !(audio_is_playing(snPlayerPanting)){
      audio_play_sound(snPlayerPanting, 3, true);
   }
}else{
      audio_stop_sound(snPlayerPanting);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>JoystickMovement</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Movement
if (state != "attack") PlayerMovement(velocity, velocityIn, velocityMax, acceleration);

x += velocity * cos(dir);
y += velocity * -sin(dir);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State

if ((state == "running") || (state == "stance")){
    //Stance
    if (velocity &lt;= 2 * acceleration) state = "stance";
    
    //Running
    else state = "running";
}

else if (state == "attack"){
     //Attacking
     if ((attack == "LL") || (attack == "LR") || (attack == "LU") || (attack == "LD") || (attack == "LL2")){
        PlayerLightAttack(false);
     }else{
        PlayerHeavyAttack(false);
     }
}

else if (state == "attackFinish"){
     //Attacking
     attackTime ++;
     if (attackTime &gt;= attackTimeTarget){
        state = "stance";
     }
}



//Roll Init
if ((state != "attack") &amp;&amp; (state != "roll")){
   if (global.joy1Pressed){
      state = "roll";
      rollTime = rollTimeMax;
      dir = dirIn;
      rollVel = 4;
      rollVelTarget = 7;
   }
}else if (state == "roll"){
      rollTime --;
      velocity = Ease("expoInOut", (rollTimeMax-rollTime), rollVel, rollVelTarget, rollTimeMax);
      if (rollTime &lt;= 0){
         state = "running";
         dir = dirIn;
      }
}
    
//Attack
if ((state != "attack") &amp;&amp; (state != "roll")){

    //Light Attack
   if (global.joy2Pressed){
       //Start Attack
       if (state == "attackFinish"){
       
          if (attack == "LR") attack = "LL";
          else if (attack == "LL") attack = "LD";
          else if (attack == "LD") attack = "LU";
          else if (attack == "LU") attack = "LL2";
          else if (attack == "LL2") attack = "LR";
       
       }else{
             if (attack == "LR") attack = "LL";
             else attack = "LR";
       }
       
       if ((attack != "HS") and (attack != "HT") and (attack != "HD")){
          dir = dirIn;
       
           PlayerLightAttack(true);
           
           //Play Sound
           audio_play_sound(asset_get_index("snSwordLightMiss" + string(1 + irandom(2))), 7, false);
       }
   }
   
   //Heavy Attack
   else if (global.joy3Pressed){ //Heavy
       //Start Attack
       if (state == "attackFinish"){
          
          dir = dirIn;
       
          if (attack == "LR") attack = "HS";
          else if (attack == "LL") attack = "HT";
          else if (attack == "LD") attack = "HD";
          else if (attack == "LU") attack = "HS";
          else if (attack == "LL2") attack = "HT";
       
       }else{
             attack = "HT";
       }
       
       PlayerHeavyAttack(true);
       
       //Play Sound
       audio_play_sound(asset_get_index("snSwordLightMiss" + string(1 + irandom(2))), 7, false);
   }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking Script
if (state == "attack"){
   PlayerWeaponCollision();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self

//draw_set_color(c_blue);
//draw_line_width(x, y, x + (attackRange * cos(dir + attackAngle)), y + (attackRange * -sin(dir + attackAngle)), 8);


//Draw Foot steps on blood
if (state == "running"){
   if ((floor(image_index) == 2) or (floor(image_index) == 8)){
      surface_set_target(global.bloodSurface);
      var p = (draw_getpixel_ext(x, y) &gt;&gt; 24) &amp; 255;
      if (p != 0){
          draw_set_alpha(p + 0.25);
          draw_set_color(make_color_hsv(0, 255, 16));
          draw_circle(x - 8 + random(16), y - 8 + random(16), 4, false);
          draw_set_alpha(1);
      }
      surface_reset_target();
   }
}

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw DEBUG
/*/Player
draw_set_color(c_blue);
draw_circle(x, y, 8, false);
draw_set_color(c_black);
draw_line_width(x, y, x+(8 *cos(dir)), y+(8 *-sin(dir)), 3);


draw_set_color(c_white);
draw_text(16, 32, "Attack Type = " + string(attack));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
